
hide != true
	Ability
	Defense
	Action
	ConflictAction
	Skill
	Check
	Condition
	Maneuver
	Ranged
	Sense
	SubSense


show=true
	Nature
	Emotion
	Environment
	Job
	Creature

	SkillBonus
	WeaponType
	Weapon
	Benefit
	Power
	Benefit
	LevelType

		show
		approved

power integers

perm = 123	= "Permanent"
rank = 121 = "Power Rank"
any = 567	= "Any"
always = 222 = "Always"
round = 333 = "One Round"
extra = 111 = "Extra Rank"
null = 444 = "Nullified"
normal = 555 = "Normal"
instant = 666= "Instant"
distance = 777 - "Distance rank"
vert = 888 = "Vertical Height"
free = 999 = "No Check"
result = 432 = "Result"
all = 778 = "All"
trait = 112 = "Trait"
imperv = 334 = "Impervious"
check = 556 = "Check"
turn = 990 = "Turn"


descriptors:

11223344 = 'Any Chosen Rare'
22334455 = 'Any Chosen Uncommon' 
33445566 = 'Any Chosen Common'
44556677 = 'Any Chosen Very Common' 
55667788 = 'Any Chosen Damage'
66778899 = 'Any Chosen Origin'
77889900 = 'Any Chosen Source'
88990011 = 'Any Chosen Medium Type'
99001122 = 'Any Chosen Medium Subtype'
11002233 = 'Any Chosen Medium'
12121212 = 'Any Chosen Descriptor'


defense
0 = any


checks
0 = none needed


sense
0 all

class PowerSenseEffect(db.Model):
	__tablename__ = 'power_sense_effect'
	id = db.Column(db.Integer, primary_key=True, autoincrement=True)
	power_id = db.Column(db.Integer)
	extra_id = db.Column(db.Integer)
	target = db.Column(db.String())
	sense = db.Column(db.Integer)
	subsense = db.Column(db.Integer)
	sense_cost = db.Column(db.Integer)
	subsense_cost = db.Column(db.Integer)
	skill = db.Column(db.Integer)
	skill_required = db.Column(db.Boolean)
	sense_type = db.Column(db.String())
	height_trait_type = db.Column(db.String())
	height_trait = db.Column(db.String())
	height_power_required = db.Column(db.Boolean)
	height_ensense = db.Column(db.String())
	resist_trait_type = db.Column(db.String())
	resist_trait = db.Column(db.String())
	resist_immune = db.Column(db.Boolean)
	resist_permanent = db.Column(db.String())
	resist_circ = db.Column(db.Integer)
	objects = db.Column(db.Boolean)
	exclusive = db.Column(db.Boolean)
	gm = db.Column(db.Boolean)
	dark = db.Column(db.Boolean)
	lighting = db.Column(db.String())
	time = db.Column(db.Boolean)
	dimensional = db.Column(db.Boolean)
	radius = db.Column(db.Boolean)
	accurate = db.Column(db.Boolean)
	acute = db.Column(db.Boolean)
	time_set = db.Column(db.String())
	time_value = db.Column(db.Integer)
	time_unit = db.Column(db.Integer)
	time_skill = db.Column(db.Integer)
	time_bonus = db.Column(db.String())
	time_factor = db.Column(db.Integer)
	distance = db.Column(db.String())
	distance_dc = db.Column(db.Integer)
	distance_mod = db.Column(db.Integer)
	distance_value = db.Column(db.Integer)
	distance_unit = db.Column(db.Integer)
	distance_factor = db.Column(db.Integer)
	dimensional_type = db.Column(db.String())
	ranks = db.Column(db.Integer)
	cost = db.Column(db.Integer)

	def format(self):
		return {
			'id': self.id,
			'power_id': self.power_id,
			'extra_id': self.extra_id,
			'target': self.target,
			'sense': self.sense,
			'subsense': self.subsense,
			'sense_cost': self.sense_cost,
			'subsense_cost': self.subsense_cost,
			'skill': self.skill,
			'skill_required': self.skill_required,
			'sense_type': self.sense_type,
			'height_trait_type': self.height_trait_type,
			'height_trait': self.height_trait,
			'height_power_required': self.height_power_required,
			'height_ensense': self.height_ensense,
			'resist_trait_type': self.resist_trait_type,
			'resist_trait': self.resist_trait,
			'resist_immune': self.resist_immune,
			'resist_permanent': self.resist_permanent,
			'resist_circ': self.resist_circ,
			'objects': self.objects,
			'exclusive': self.exclusive,
			'gm': self.gm,
			'dark': self.dark,
			'lighting': self.lighting,
			'time': self.time,
			'dimensional': self.dimensional,
			'radius': self.radius,
			'accurate': self.accurate,
			'acute': self.acute,
			'time_set': self.time_set,
			'time_value': self.time_value,
			'time_unit': self.time_unit,
			'time_skill': self.time_skill,
			'time_bonus': self.time_bonus,
			'time_factor': self.time_factor,
			'distance': self.distance,
			'distance_dc': self.distance_dc,
			'distance_mod': self.distance_mod,
			'distance_value': self.distance_value,
			'distance_unit': self.distance_unit,
			'distance_factor': self.distance_factor,
			'dimensional_type': self.dimensional_type,
			'ranks': self.ranks,
			'cost': self.cost
		}
